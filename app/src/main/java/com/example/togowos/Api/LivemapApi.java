/*
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.togowos.Api;

import com.example.togowos.ApiCallback;
import com.example.togowos.ApiClient;
import com.example.togowos.ApiException;
import com.example.togowos.ApiResponse;
import com.example.togowos.Configuration;
import com.example.togowos.Pair;
import com.example.togowos.ProgressRequestBody;
import com.example.togowos.ProgressResponseBody;
import com.example.togowos.model.LiveMap;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LivemapApi {
    private ApiClient apiClient;

    public LivemapApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LivemapApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for livemap
     * @param minx Left border (longitude) of the bounding box in WGS84 * 1000000 (required)
     * @param maxx Right border (longitude) of the bounding box in WGS84 * 1000000 (required)
     * @param miny Lower border (latitude) of the bounding box in WGS84 * 1000000 (required)
     * @param maxy Upper border (latitude) of the bounding box in WGS84 * 1000000 (required)
     * @param onlyRealtime Can be used to define whether all vehicles should be returned or only those  vehicles which have realtime information. If it is set to yes, only vehicles  with realtime information are returned, if it is set to no, all vehicles in the  bounding box are returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call livemapCall(String minx, String maxx, String miny, String maxy, String onlyRealtime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/livemap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (minx != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minx", minx));
        if (maxx != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxx", maxx));
        if (miny != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("miny", miny));
        if (maxy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxy", maxy));
        if (onlyRealtime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyRealtime", onlyRealtime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call livemapValidateBeforeCall(String minx, String maxx, String miny, String maxy, String onlyRealtime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'minx' is set
        if (minx == null) {
            throw new ApiException("Missing the required parameter 'minx' when calling livemap(Async)");
        }

        // verify the required parameter 'maxx' is set
        if (maxx == null) {
            throw new ApiException("Missing the required parameter 'maxx' when calling livemap(Async)");
        }

        // verify the required parameter 'miny' is set
        if (miny == null) {
            throw new ApiException("Missing the required parameter 'miny' when calling livemap(Async)");
        }

        // verify the required parameter 'maxy' is set
        if (maxy == null) {
            throw new ApiException("Missing the required parameter 'maxy' when calling livemap(Async)");
        }

        // verify the required parameter 'onlyRealtime' is set
        if (onlyRealtime == null) {
            throw new ApiException("Missing the required parameter 'onlyRealtime' when calling livemap(Async)");
        }


        com.squareup.okhttp.Call call = livemapCall(minx, maxx, miny, maxy, onlyRealtime, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the positions of all vehicles in a given bounding box
     * This method will return the positions of all vehicles in a given bounding box.
     * @param minx Left border (longitude) of the bounding box in WGS84 * 1000000 (required)
     * @param maxx Right border (longitude) of the bounding box in WGS84 * 1000000 (required)
     * @param miny Lower border (latitude) of the bounding box in WGS84 * 1000000 (required)
     * @param maxy Upper border (latitude) of the bounding box in WGS84 * 1000000 (required)
     * @param onlyRealtime Can be used to define whether all vehicles should be returned or only those  vehicles which have realtime information. If it is set to yes, only vehicles  with realtime information are returned, if it is set to no, all vehicles in the  bounding box are returned. (required)
     * @return LiveMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveMap livemap(String minx, String maxx, String miny, String maxy, String onlyRealtime) throws ApiException {
        ApiResponse<LiveMap> resp = livemapWithHttpInfo(minx, maxx, miny, maxy, onlyRealtime);
        return resp.getData();
    }

    /**
     * Returns the positions of all vehicles in a given bounding box
     * This method will return the positions of all vehicles in a given bounding box.
     * @param minx Left border (longitude) of the bounding box in WGS84 * 1000000 (required)
     * @param maxx Right border (longitude) of the bounding box in WGS84 * 1000000 (required)
     * @param miny Lower border (latitude) of the bounding box in WGS84 * 1000000 (required)
     * @param maxy Upper border (latitude) of the bounding box in WGS84 * 1000000 (required)
     * @param onlyRealtime Can be used to define whether all vehicles should be returned or only those  vehicles which have realtime information. If it is set to yes, only vehicles  with realtime information are returned, if it is set to no, all vehicles in the  bounding box are returned. (required)
     * @return ApiResponse&lt;LiveMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveMap> livemapWithHttpInfo(String minx, String maxx, String miny, String maxy, String onlyRealtime) throws ApiException {
        com.squareup.okhttp.Call call = livemapValidateBeforeCall(minx, maxx, miny, maxy, onlyRealtime, null, null);
        Type localVarReturnType = new TypeToken<LiveMap>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the positions of all vehicles in a given bounding box (asynchronously)
     * This method will return the positions of all vehicles in a given bounding box.
     * @param minx Left border (longitude) of the bounding box in WGS84 * 1000000 (required)
     * @param maxx Right border (longitude) of the bounding box in WGS84 * 1000000 (required)
     * @param miny Lower border (latitude) of the bounding box in WGS84 * 1000000 (required)
     * @param maxy Upper border (latitude) of the bounding box in WGS84 * 1000000 (required)
     * @param onlyRealtime Can be used to define whether all vehicles should be returned or only those  vehicles which have realtime information. If it is set to yes, only vehicles  with realtime information are returned, if it is set to no, all vehicles in the  bounding box are returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call livemapAsync(String minx, String maxx, String miny, String maxy, String onlyRealtime, final ApiCallback<LiveMap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = livemapValidateBeforeCall(minx, maxx, miny, maxy, onlyRealtime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveMap>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
