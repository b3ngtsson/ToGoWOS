/*
 * Reseplaneraren
 * Provides access to Västtrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.togowos.Api;

import com.example.togowos.ApiCallback;
import com.example.togowos.ApiClient;
import com.example.togowos.ApiException;
import com.example.togowos.ApiResponse;
import com.example.togowos.Configuration;
import com.example.togowos.Pair;
import com.example.togowos.ProgressRequestBody;
import com.example.togowos.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.example.togowos.model.ArrivalBoard;
import org.threeten.bp.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArrivalBoardApi {
    private ApiClient apiClient;

    public ArrivalBoardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArrivalBoardApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getArrivalBoard
     * @param id stop id (required)
     * @param date the date (required)
     * @param time the time in format HH:MM (required)
     * @param direction stop id in order to get only departures of vehicles with a specified direction (required)
     * @param useVas to exclude trips with Västtågen, set this parameter to 0. (optional)
     * @param useLDTrain to exclude trips with long distance trains, set this parameter to 0. (optional)
     * @param useRegTrain to exclude trips with regional trains, set this parameter to 0. (optional)
     * @param useBus to exclude trips with buses, set this parameter to 0. (optional)
     * @param useBoat to exclude trips with boats, set this parameter to 0. (optional)
     * @param useTram to exclude trips with trams, set this parameter to 0. (optional)
     * @param excludeDR to exclude journeys which require tel. registration, set this parameter to 0. (optional)
     * @param timeSpan to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures. (optional)
     * @param maxDeparturesPerLine if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction. (optional)
     * @param needJourneyDetail if the reference URL for the journey detail service is not needed in the result, set this parameter to 0 (optional)
     * @param format the required response format (optional)
     * @param jsonpCallback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getArrivalBoardCall(Long id, LocalDate date, String time, Long direction, String useVas, String useLDTrain, String useRegTrain, String useBus, String useBoat, String useTram, String excludeDR, Integer timeSpan, Integer maxDeparturesPerLine, String needJourneyDetail, String format, String jsonpCallback, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/arrivalBoard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (date != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (time != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("time", time));
        if (useVas != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("useVas", useVas));
        if (useLDTrain != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("useLDTrain", useLDTrain));
        if (useRegTrain != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("useRegTrain", useRegTrain));
        if (useBus != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("useBus", useBus));
        if (useBoat != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("useBoat", useBoat));
        if (useTram != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("useTram", useTram));
        if (excludeDR != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("excludeDR", excludeDR));
        if (timeSpan != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("timeSpan", timeSpan));
        if (maxDeparturesPerLine != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("maxDeparturesPerLine", maxDeparturesPerLine));
        if (needJourneyDetail != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("needJourneyDetail", needJourneyDetail));
        if (direction != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));
        if (format != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (jsonpCallback != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("jsonpCallback", jsonpCallback));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getArrivalBoardValidateBeforeCall(Long id, LocalDate date, String time, Long direction, String useVas, String useLDTrain, String useRegTrain, String useBus, String useBoat, String useTram, String excludeDR, Integer timeSpan, Integer maxDeparturesPerLine, String needJourneyDetail, String format, String jsonpCallback, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getArrivalBoard(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getArrivalBoard(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling getArrivalBoard(Async)");
        }

        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling getArrivalBoard(Async)");
        }


        com.squareup.okhttp.Call call = getArrivalBoardCall(id, date, time, direction, useVas, useLDTrain, useRegTrain, useBus, useBoat, useTram, excludeDR, timeSpan, maxDeparturesPerLine, needJourneyDetail, format, jsonpCallback, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan.
     * This method will return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan. The service can only be called for stops/stations by using according ID retrieved by the location method. The parameter is called id. The time and date are defined with the parameters date and time.
     * @param id stop id (required)
     * @param date the date (required)
     * @param time the time in format HH:MM (required)
     * @param direction stop id in order to get only departures of vehicles with a specified direction (required)
     * @param useVas to exclude trips with Västtågen, set this parameter to 0. (optional)
     * @param useLDTrain to exclude trips with long distance trains, set this parameter to 0. (optional)
     * @param useRegTrain to exclude trips with regional trains, set this parameter to 0. (optional)
     * @param useBus to exclude trips with buses, set this parameter to 0. (optional)
     * @param useBoat to exclude trips with boats, set this parameter to 0. (optional)
     * @param useTram to exclude trips with trams, set this parameter to 0. (optional)
     * @param excludeDR to exclude journeys which require tel. registration, set this parameter to 0. (optional)
     * @param timeSpan to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures. (optional)
     * @param maxDeparturesPerLine if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction. (optional)
     * @param needJourneyDetail if the reference URL for the journey detail service is not needed in the result, set this parameter to 0 (optional)
     * @param format the required response format (optional)
     * @param jsonpCallback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name. (optional)
     * @return ArrivalBoard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrivalBoard getArrivalBoard(Long id, LocalDate date, String time, Long direction, String useVas, String useLDTrain, String useRegTrain, String useBus, String useBoat, String useTram, String excludeDR, Integer timeSpan, Integer maxDeparturesPerLine, String needJourneyDetail, String format, String jsonpCallback) throws ApiException {
        ApiResponse<ArrivalBoard> resp = getArrivalBoardWithHttpInfo(id, date, time, direction, useVas, useLDTrain, useRegTrain, useBus, useBoat, useTram, excludeDR, timeSpan, maxDeparturesPerLine, needJourneyDetail, format, jsonpCallback);
        return resp.getData();
    }

    /**
     * Return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan.
     * This method will return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan. The service can only be called for stops/stations by using according ID retrieved by the location method. The parameter is called id. The time and date are defined with the parameters date and time.
     * @param id stop id (required)
     * @param date the date (required)
     * @param time the time in format HH:MM (required)
     * @param direction stop id in order to get only departures of vehicles with a specified direction (required)
     * @param useVas to exclude trips with Västtågen, set this parameter to 0. (optional)
     * @param useLDTrain to exclude trips with long distance trains, set this parameter to 0. (optional)
     * @param useRegTrain to exclude trips with regional trains, set this parameter to 0. (optional)
     * @param useBus to exclude trips with buses, set this parameter to 0. (optional)
     * @param useBoat to exclude trips with boats, set this parameter to 0. (optional)
     * @param useTram to exclude trips with trams, set this parameter to 0. (optional)
     * @param excludeDR to exclude journeys which require tel. registration, set this parameter to 0. (optional)
     * @param timeSpan to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures. (optional)
     * @param maxDeparturesPerLine if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction. (optional)
     * @param needJourneyDetail if the reference URL for the journey detail service is not needed in the result, set this parameter to 0 (optional)
     * @param format the required response format (optional)
     * @param jsonpCallback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name. (optional)
     * @return ApiResponse&lt;ArrivalBoard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrivalBoard> getArrivalBoardWithHttpInfo(Long id, LocalDate date, String time, Long direction, String useVas, String useLDTrain, String useRegTrain, String useBus, String useBoat, String useTram, String excludeDR, Integer timeSpan, Integer maxDeparturesPerLine, String needJourneyDetail, String format, String jsonpCallback) throws ApiException {
        com.squareup.okhttp.Call call = getArrivalBoardValidateBeforeCall(id, date, time, direction, useVas, useLDTrain, useRegTrain, useBus, useBoat, useTram, excludeDR, timeSpan, maxDeparturesPerLine, needJourneyDetail, format, jsonpCallback, null, null);
        Type localVarReturnType = new TypeToken<ArrivalBoard>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan. (asynchronously)
     * This method will return the next 20 arrivals (or less if not existing) from a given point in time or the next arrivals in a given timespan. The service can only be called for stops/stations by using according ID retrieved by the location method. The parameter is called id. The time and date are defined with the parameters date and time.
     * @param id stop id (required)
     * @param date the date (required)
     * @param time the time in format HH:MM (required)
     * @param direction stop id in order to get only departures of vehicles with a specified direction (required)
     * @param useVas to exclude trips with Västtågen, set this parameter to 0. (optional)
     * @param useLDTrain to exclude trips with long distance trains, set this parameter to 0. (optional)
     * @param useRegTrain to exclude trips with regional trains, set this parameter to 0. (optional)
     * @param useBus to exclude trips with buses, set this parameter to 0. (optional)
     * @param useBoat to exclude trips with boats, set this parameter to 0. (optional)
     * @param useTram to exclude trips with trams, set this parameter to 0. (optional)
     * @param excludeDR to exclude journeys which require tel. registration, set this parameter to 0. (optional)
     * @param timeSpan to get the next departures in a specified timespan of up to 24 hours (unit: minutes). If this parameter is not set, the result will contain the next 20 departures. (optional)
     * @param maxDeparturesPerLine if timeSpan is set you can further reduce the number of returned journeys by adding this parameter, which will cause only the given number of journeys for every combination of line and direction. (optional)
     * @param needJourneyDetail if the reference URL for the journey detail service is not needed in the result, set this parameter to 0 (optional)
     * @param format the required response format (optional)
     * @param jsonpCallback If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getArrivalBoardAsync(Long id, LocalDate date, String time, Long direction, String useVas, String useLDTrain, String useRegTrain, String useBus, String useBoat, String useTram, String excludeDR, Integer timeSpan, Integer maxDeparturesPerLine, String needJourneyDetail, String format, String jsonpCallback, final ApiCallback<ArrivalBoard> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getArrivalBoardValidateBeforeCall(id, date, time, direction, useVas, useLDTrain, useRegTrain, useBus, useBoat, useTram, excludeDR, timeSpan, maxDeparturesPerLine, needJourneyDetail, format, jsonpCallback, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrivalBoard>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
