/*
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import com.example.togowos.Api.TripApi;
import com.example.togowos.model.TripList;

import org.threeten.bp.LocalDate;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TripApi
 */
@Ignore
public class TripApiTest {

    private final TripApi api = new TripApi();


    /**
     * Calculates a trip from a specified origin to a specified destination.
     *
     * Calculates a trip from a specified origin to a specified destination. These might be stop/station IDs or coordinates based on addresses and points of interest validated by the location service or coordinates freely defined by the client. Parameters specifying both origin and destination are mandatory in calls to the trip service. When specifying a stop as origin, the parameter originId is used, while originCoordLat, originCoordLong, and originCoordName are used to specify a (named) coordinate. For the destination, the corresponding parameters are named either destId or destCoordLat, destCoordLong and destCoordName. It is also possible to define a via-stop/station. This forces the journey planner to search for trips which pass the defined station. The parameter is called viaId. When searching for a trip that goes via a coordinate, rather than a stop, two separate trip requests need to be combined into one.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTripTest() throws Exception {
        Long originId = null;
        Double originCoordLat = null;
        Double originCoordLong = null;
        String originCoordName = null;
        Long destId = null;
        Double destCoordLat = null;
        Double destCoordLong = null;
        String destCoordName = null;
        Long viaId = null;
        LocalDate date = null;
        String time = null;
        String searchForArrival = null;
        String useVas = null;
        String useLDTrain = null;
        String useRegTrain = null;
        String useBus = null;
        String useMedical = null;
        String originMedicalCon = null;
        String destMedicalCon = null;
        String wheelChairSpace = null;
        String strollerSpace = null;
        String lowFloor = null;
        String rampOrLift = null;
        String useBoat = null;
        String useTram = null;
        String usePT = null;
        String excludeDR = null;
        Integer maxWalkDist = null;
        String walkSpeed = null;
        String originWalk = null;
        String destWalk = null;
        String onlyWalk = null;
        String originBike = null;
        Integer maxBikeDist = null;
        String bikeCriterion = null;
        String bikeProfile = null;
        String onlyBike = null;
        String originCar = null;
        String originCarWithParking = null;
        Integer maxCarDist = null;
        String onlyCar = null;
        Integer maxChanges = null;
        Integer additionalChangeTime = null;
        String disregardDefaultChangeMargin = null;
        String needJourneyDetail = null;
        String needGeo = null;
        String needItinerary = null;
        Integer numTrips = null;
        String format = null;
        String jsonpCallback = null;
        TripList response = api.getTrip(originId, originCoordLat, originCoordLong, originCoordName, destId, destCoordLat, destCoordLong, destCoordName, viaId, date, time, searchForArrival, useVas, useLDTrain, useRegTrain, useBus, useMedical, originMedicalCon, destMedicalCon, wheelChairSpace, strollerSpace, lowFloor, rampOrLift, useBoat, useTram, usePT, excludeDR, maxWalkDist, walkSpeed, originWalk, destWalk, onlyWalk, originBike, maxBikeDist, bikeCriterion, bikeProfile, onlyBike, originCar, originCarWithParking, maxCarDist, onlyCar, maxChanges, additionalChangeTime, disregardDefaultChangeMargin, needJourneyDetail, needGeo, needItinerary, numTrips, format, jsonpCallback);

        // TODO: test validations
    }

}
