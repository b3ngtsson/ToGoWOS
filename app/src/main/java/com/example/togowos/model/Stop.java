/*
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.togowos.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.example.togowos.Api.*;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.LocalDate;

/**
 * Stop
 */
public class Stop {
  @SerializedName("routeIdx")
  private String routeIdx = null;

  @SerializedName("arrDate")
  private LocalDate arrDate = null;

  @SerializedName("depTime")
  private String depTime = null;

  @SerializedName("lon")
  private String lon = null;

  @SerializedName("depDate")
  private LocalDate depDate = null;

  @SerializedName("track")
  private String track = null;

  @SerializedName("rtTrack")
  private String rtTrack = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("rtDepTime")
  private String rtDepTime = null;

  @SerializedName("rtArrTime")
  private String rtArrTime = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("arrTime")
  private String arrTime = null;

  @SerializedName("lat")
  private String lat = null;

  @SerializedName("rtDepDate")
  private LocalDate rtDepDate = null;

  @SerializedName("rtArrDate")
  private LocalDate rtArrDate = null;

  public Stop routeIdx(String routeIdx) {
    this.routeIdx = routeIdx;
    return this;
  }

   /**
   * Route index of a stop/station. Can be used as a reference of the stop/station in a journeyDetail response
   * @return routeIdx
  **/
  @ApiModelProperty(required = true, value = "Route index of a stop/station. Can be used as a reference of the stop/station in a journeyDetail response")
  public String getRouteIdx() {
    return routeIdx;
  }

  public void setRouteIdx(String routeIdx) {
    this.routeIdx = routeIdx;
  }

  public Stop arrDate(LocalDate arrDate) {
    this.arrDate = arrDate;
    return this;
  }

   /**
   * Arrival date in format YYYY-MM-DD, if available
   * @return arrDate
  **/
  @ApiModelProperty(value = "Arrival date in format YYYY-MM-DD, if available")
  public LocalDate getArrDate() {
    return arrDate;
  }

  public void setArrDate(LocalDate arrDate) {
    this.arrDate = arrDate;
  }

  public Stop depTime(String depTime) {
    this.depTime = depTime;
    return this;
  }

   /**
   * Departure time in format HH:MM, if available
   * @return depTime
  **/
  @ApiModelProperty(value = "Departure time in format HH:MM, if available")
  public String getDepTime() {
    return depTime;
  }

  public void setDepTime(String depTime) {
    this.depTime = depTime;
  }

  public Stop lon(String lon) {
    this.lon = lon;
    return this;
  }

   /**
   * The WGS84 longitude
   * @return lon
  **/
  @ApiModelProperty(required = true, value = "The WGS84 longitude")
  public String getLon() {
    return lon;
  }

  public void setLon(String lon) {
    this.lon = lon;
  }

  public Stop depDate(LocalDate depDate) {
    this.depDate = depDate;
    return this;
  }

   /**
   * Departure date in format YYYY-MM-DD, if available
   * @return depDate
  **/
  @ApiModelProperty(value = "Departure date in format YYYY-MM-DD, if available")
  public LocalDate getDepDate() {
    return depDate;
  }

  public void setDepDate(LocalDate depDate) {
    this.depDate = depDate;
  }

  public Stop track(String track) {
    this.track = track;
    return this;
  }

   /**
   * Track information, if available
   * @return track
  **/
  @ApiModelProperty(required = true, value = "Track information, if available")
  public String getTrack() {
    return track;
  }

  public void setTrack(String track) {
    this.track = track;
  }

  public Stop rtTrack(String rtTrack) {
    this.rtTrack = rtTrack;
    return this;
  }

   /**
   * Realtime track information, if available
   * @return rtTrack
  **/
  @ApiModelProperty(value = "Realtime track information, if available")
  public String getRtTrack() {
    return rtTrack;
  }

  public void setRtTrack(String rtTrack) {
    this.rtTrack = rtTrack;
  }

  public Stop id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Stop rtDepTime(String rtDepTime) {
    this.rtDepTime = rtDepTime;
    return this;
  }

   /**
   * Realtime departure time in format HH:MM if available
   * @return rtDepTime
  **/
  @ApiModelProperty(value = "Realtime departure time in format HH:MM if available")
  public String getRtDepTime() {
    return rtDepTime;
  }

  public void setRtDepTime(String rtDepTime) {
    this.rtDepTime = rtDepTime;
  }

  public Stop rtArrTime(String rtArrTime) {
    this.rtArrTime = rtArrTime;
    return this;
  }

   /**
   * Realtime arrival time in format HH:MM if available
   * @return rtArrTime
  **/
  @ApiModelProperty(value = "Realtime arrival time in format HH:MM if available")
  public String getRtArrTime() {
    return rtArrTime;
  }

  public void setRtArrTime(String rtArrTime) {
    this.rtArrTime = rtArrTime;
  }

  public Stop name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Contains the name of the stop/station
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Contains the name of the stop/station")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Stop arrTime(String arrTime) {
    this.arrTime = arrTime;
    return this;
  }

   /**
   * Arrival time in format HH:MM, if available
   * @return arrTime
  **/
  @ApiModelProperty(value = "Arrival time in format HH:MM, if available")
  public String getArrTime() {
    return arrTime;
  }

  public void setArrTime(String arrTime) {
    this.arrTime = arrTime;
  }

  public Stop lat(String lat) {
    this.lat = lat;
    return this;
  }

   /**
   * The WGS84 latitude
   * @return lat
  **/
  @ApiModelProperty(required = true, value = "The WGS84 latitude")
  public String getLat() {
    return lat;
  }

  public void setLat(String lat) {
    this.lat = lat;
  }

  public Stop rtDepDate(LocalDate rtDepDate) {
    this.rtDepDate = rtDepDate;
    return this;
  }

   /**
   * Realtime departure date in format YYYY-MM-DD, if available
   * @return rtDepDate
  **/
  @ApiModelProperty(value = "Realtime departure date in format YYYY-MM-DD, if available")
  public LocalDate getRtDepDate() {
    return rtDepDate;
  }

  public void setRtDepDate(LocalDate rtDepDate) {
    this.rtDepDate = rtDepDate;
  }

  public Stop rtArrDate(LocalDate rtArrDate) {
    this.rtArrDate = rtArrDate;
    return this;
  }

   /**
   * Realtime arrival date in format YYYY-MM-DD, if available
   * @return rtArrDate
  **/
  @ApiModelProperty(value = "Realtime arrival date in format YYYY-MM-DD, if available")
  public LocalDate getRtArrDate() {
    return rtArrDate;
  }

  public void setRtArrDate(LocalDate rtArrDate) {
    this.rtArrDate = rtArrDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stop stop = (Stop) o;
    return Objects.equals(this.routeIdx, stop.routeIdx) &&
        Objects.equals(this.arrDate, stop.arrDate) &&
        Objects.equals(this.depTime, stop.depTime) &&
        Objects.equals(this.lon, stop.lon) &&
        Objects.equals(this.depDate, stop.depDate) &&
        Objects.equals(this.track, stop.track) &&
        Objects.equals(this.rtTrack, stop.rtTrack) &&
        Objects.equals(this.id, stop.id) &&
        Objects.equals(this.rtDepTime, stop.rtDepTime) &&
        Objects.equals(this.rtArrTime, stop.rtArrTime) &&
        Objects.equals(this.name, stop.name) &&
        Objects.equals(this.arrTime, stop.arrTime) &&
        Objects.equals(this.lat, stop.lat) &&
        Objects.equals(this.rtDepDate, stop.rtDepDate) &&
        Objects.equals(this.rtArrDate, stop.rtArrDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(routeIdx, arrDate, depTime, lon, depDate, track, rtTrack, id, rtDepTime, rtArrTime, name, arrTime, lat, rtDepDate, rtArrDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stop {\n");

    sb.append("    routeIdx: ").append(toIndentedString(routeIdx)).append("\n");
    sb.append("    arrDate: ").append(toIndentedString(arrDate)).append("\n");
    sb.append("    depTime: ").append(toIndentedString(depTime)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    depDate: ").append(toIndentedString(depDate)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    rtTrack: ").append(toIndentedString(rtTrack)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rtDepTime: ").append(toIndentedString(rtDepTime)).append("\n");
    sb.append("    rtArrTime: ").append(toIndentedString(rtArrTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arrTime: ").append(toIndentedString(arrTime)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    rtDepDate: ").append(toIndentedString(rtDepDate)).append("\n");
    sb.append("    rtArrDate: ").append(toIndentedString(rtArrDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

